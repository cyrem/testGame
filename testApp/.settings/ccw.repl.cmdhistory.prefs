cmdhistory=["(map \#(send %) objL)" "(map \#(send %) @objL)" "(map \#(send % moveObj) @objL)" "(procGobjL objL)" "procGobjL" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "(reset\! running nil)" "@objL" ";; Switching to test.core namespace" "(paintLoop)" "(map \#(send % moveObj) @objL)" "(paintLoop)" "(paintloop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "@objL" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "img" "(.getWidth img)" "img" "(paintLoop)" "(rectCol [10 10] [20 20] [40 40] [50 50])" "(rectCol [10 20] [20 20] [40 40] [50 50])" "(rectCol [10 21] [20 20] [40 40] [50 50])" "(rectCol [10 10] [20 40] [40 40] [50 50])" "(rectCol [10 10] [20 41] [40 40] [50 50])" "(rectCol [10 10] [20 60] [40 40] [50 50])" "(rectCol [10 60] [20 60] [40 40] [50 50])" " (rectCol [10 10] [70 60] [40 40] [50 50])" "(rectCol [1 1] [2 2] [3 3] [4 4])" "(rectCol [1 1] [2 2] [2 2] [4 4])" "(rectCol [5 5] [7 7] [3 3] [9 9])" "(buildQuadTree tR)" "tR" "tR2" "(findWithBounds tR tR2)" "(findWithBounds rzip tR2)" "rzip" "(findWithBounds rzip tR2)" "(findWithBounds bsZip tR2)" "(time (findWithBounds bsZip tR2))" "bsZip" "(zip/next bsZip)" "(zip/next (zip/next bsZip))" "(zip/down bsZip)" "(zip/down (zip/down bsZip))" "(zip/right (zip/down bsZip))" "(buildQuadTree tR)" "tR" "(buildQuadTree tR)" "empty? []" "(println (empty? []))" "(buildQuadTree tR)" " (buildQuadTree tR)" "bsZip" " (buildQuadTree tR)" "(buildQuadTree bsZip)" "(paintLoop)" "(paintloop)" "(paintLoop)" "a" "(sas)" "(->XYPoint2 (matrix \:vectorz 1 1))" "(->XYPoint2 (matrix \:vectorz [3 3]))" "(->XYPoint2 (matrix [3 3]))" "(->XYPoint2 (matrix [1 2]))" "(->XYPoint2 (matrix [1 22 2]))" "(/ 2 (matrix [20 20]))" " (* 2 (matrix [20 20]))" "(/ 2 (matrix [20 20]))" "(/ (matrix [20 20]) 2)" "(* (matrix [20 20]) [4 5])" "(+ (matrix [20 20]) [4 5])" "(* (matrix [20 20]) (matrix [4 5]))" "(split tR)" "tR" "(split tR)" "(\:size tR)" "(\:coords (\:size tR))" "(\:pos tR)" "(\:coords (\:pos tR))" "tR" "(split tR)" " (split tR)" "(split tR)" " (split tR)" "(< (matrix [1 1]) (matrix [4 4] ))" "(first (matrix [1 3]))" "(within? tR tR2)" "(\:pos tR)" "(\:size tR)" " (within? tR tR2)" " (within? tR2 tR2)" " (within? tR2 tR)" "(intersect? tR tR2)" "tR" "tR2" "(getSector tR tR2)" "(getSector tR2 tR)" " (getSector tR2 tR)" "(getSector tR2 tR)" "(getSector tR tR2)" "(getSector tR2 tR)" "(getSector tR tR)" "(within? tR tR2)" "(within? tR2 tr)" "(within? tR2 tR)" "(within? tR tR)" "(getSector tR tR)" "(getSector tR tR)\\r\\nIndexOutOfBoundsExcepti" "(getSector tR tR)" "(getSector tR tR2)" "tR" "tR2" "(getSector tR tR2)" "(time (getSector tR tR2))" "rZip" "rzip" "(subDivide rzip)" "(findWithBounds rzip tR2)" "(findWithBounds (split rzip) tR2)" "(findWithBounds (subDivide rzip) tR2)" "(findWithBounds bsZip tR2)" "(buildQuadTree bsZip)" "(buildQuadTree tR)" "(buildQuadTree q)" " (buildQuadTree q)" "(buildQuadTree q)" "(getSector tR (->XYPoint (matrix [5 5])))" "(getSector tR (matrix [5 5]))" "(getSector tR  [5 5])" "(getSector tR tR2)" "(getSector tR2 tR)" "(subDivide tR)" "(subDivide rzip)" "rtest" "bsZip" "(root bsZip)" "(zip/root bsZip)" "bsZip" "(zipperCreate (zip/root bsZip))" "(time (zipperCreate (zip/root bsZip)))" "bsZip" "(buildQuadTree q)" "bsZip" "(zip/root bsZip)" "(zip/down bsZip)" "(\:c bsZip)" "bsZip" "q" "rtest" "(\:c rtest)" "(\:c (zip/node bsZip))" "(type (\:c (zip/node bsZip)))" "(type [])" "(buildQuadTree q)" "(\:c (buildQuadTree q))" "(buildQuadTree q)" "(\:c (buildQuadTree q))" "(first (\:c (buildQuadTree q)))" "(doall (map + [1 2 3 4]))" "(doall (map + [1 2 3 4] [2 3 4 5]))" "(type (doall (map + [1 2 3 4] [2 3 4 5])))" "(buildQuadTree q)" "bQuad" "zipAg" "(findWithBounds bQuad tR2)" "(findWithBounds bQuad tR)" "(findWithBounds zipCr tR2)" "(time (findWithBounds zipCr tR2))" "(findWithBounds zipCr tR2)" "(zip/down (findWithBounds zipCr tR2))" "(zip/next (zip/down (findWithBounds zipCr tR2)))" "(getAllElements zipCr)" "(instance? q)" "(getAllElements (findWithBounds zipCr tR2))" " (getAllElements (findWithBounds zipCr tR2))" "(instance? q)" "(instace? test.quadTree.QuadNode q)" " (instance? test.quadTree.QuadNode q)" "(getAllElements zipCr)" "(instance? 'test.quadTree.QuadNode q)" "(instance? test.quadTree.QuadNode q)" "bQuad" "(zip/down bQuad)" "(zip/down zipCr)" "(time (zip/down zipCr))" "(zip/down zipCr)" "bQuad" "(zip/next zipCr)" "(zip/next (zip/next zipCr))" "(zip/next (zip/next (zip/next zipCr)))" "(zip/next (zip/next (zip/next (zip/next zipCr))))" " (zip/next (zip/next (zip/next zipCr)))" "(zip/next  (zip/next (zip/next (zip/next zipCr))))" "(zip/next tree-z)" "(zip/next (zip/next tree-z))" "(zip/next (zip/next (zip/next tree-z)))" "(zip/next (zip/next (zip/next (zip/next tree-z))))" "(zip/next (zip/next (zip/next (zip/next (zip/next tree-z)))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next tree-z))))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next tree-z)))))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next tree-z))))))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next tree-z)))))))))" "(zip/next zipCr)" "(zip/next (zip/next zipCr))" "(zip/next (zip/next (zip/next zipCr)))" "(zip/next (zip/next (zip/next (zip/next zipCr))))" "(zip/next (zip/next (zip/next (zip/next (zip/next zipCr)))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next zipCr))))))" "(getAllElements zipCr)" " (getAllElements zipCr)" "(buildQuadTree zipCr)" "(getAllElements zipCr)" " (getAllElements zipCr 0)" "zipCr" "(zip/next zipCr)" "(zip/next (zip/next zipCr))" "(zip/down (zip/next (zip/next zipCr)))" "(zip/right (zip/next (zip/next zipCr)))" "(zip/right (zip/next zipCr))" "(zip/right (zip/right (zip/next zipCr)))" "zipCr" "(getAllElements zipCr)" "(getAllElements zipCr 0)" "(zip/next zipCr)" "(zip/next (zip/next zipCr))" "(zip/next zipCr)" "(getAllElements zipCr 0)" "(findWithBounds zipCr tR)" "(findWithBounds zipCr tR2)" "zipCr" "(zip/down zipCr)" "(zip/down (zip/down zipCr))" " (zip/down zipCr)" "(zip/down (zip/down zipCr))" "(zip/down (zip/down (zip/down zipCr)))" "(zip/right (zip/down zipCr))" "(zip/right (zip/right (zip/down zipCr)))" "(zip/right (zip/right (zip/right (zip/down zipCr))))" "(findWithBounds zipCr tR2)" "(getAllElements zipCr 0)" "zipCr" "(time zipCr)" "(insert zipCr tR2)" "(mapv \#(\:o %1) zipCr)" "(zip/vector-zip zipCr)" "(zip-map \#(println %1) zipCr)" " (zip-map \#(println %1 %2) zipCr)" "(zip-map (fn [n nx] println n) zipCr)" "(zip-map (fn [n nx] println nx) zipCr)" "(zip-map (fn [n nx] println n) zipCr)" "(zip-map (fn [n nx] println (\:o n)) zipCr)" "(zip-map (fn [n nx] println (\:o n)) (insert zipCr tR2))" "(zip-map (fn [n nx] println (\:c n)) (insert zipCr tR2))" "(zip-map (fn [n nx] println (\:o nx)) (insert zipCr tR2))" "(zip-map (fn [n nx] println (type nx)) (insert zipCr tR2))" "(zip-map (fn [n nx] println (type n)) (insert zipCr tR2))" "(zip-map (fn [n nx] println  nx) (insert zipCr tR2))" "(getAllElements zipCr)" "(getAllElements (insert zipCr tR2))" "(insert zipCr tR2)" "(findWithBounds zipCr tR2)" "(insert zipCr tR2)" "(getAllElements zipCr)" "(insert zipCr tR2)" "(zipperCreate \#test.quadTree.QuadNode{\:o [], \:d 0, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [0.0,0.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [100.0,100.0]>}}, \:c (\#test.quadTree.QuadNode{\:o [\#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [6.0,6.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [20.0,1.0]>}}], \:d 1, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [0.0,0.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [50.0,50.0]>}}, \:c []} \#test.quadTree.QuadNode{\:o [], \:d 1, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [50.0,0.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords [100.0 50.0]}}, \:c []} \#test.quadTree.QuadNode{\:o [], \:d 1, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [0.0,50.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords [50.0 100.0]}\\r\\n}, \:c []} \#test.quadTree.QuadNode{\:o [], \:d 1, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [50.0,50.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [100.0,100.0]>}}, \:c []})})" "\\n(insert zipCr tR2)" "(insert zipCr tR2)" "zipCr" "(getAllElements zipCr)" "(insert zipCr tR2)" "(getAllElements zipCr)" " (getAllElements zipCr)" "(conj [2] [3])" "(getAllElements zipCr)" "(concat [3] [2])" "(concat [3] [2 1])" " (con [3] [2 1])" "(conj [3] [2 1])" "(reduce \#(conj %1 %2) [1 2 3])" "(reduce \#(conj %2 %1) [1 2 3])" "(reduce \#(conj %1 %2) [] [1 2 3])" "(getAllElements zipCr)" " (getAllElements (insert zipCr tR2))" "(getAllElements (insert zipCr tR2))" "(time  (getAllElements (insert zipCr tR2)))" " (time  (getAllElements zipCr ))" "(time  (getAllElements zipCr ))" "(time (zipperCreate bQuad))" "testUni" "(placeSystems testUni 3)" "(test.util/getUniqueRndKey (\:starMap uni) nr)" "(test.util/getUniqueRndKey (\:starMap testUni) nr)" "(test.util/getUniqueRndKey (\:starMap testUni) 3)" "(test.util/getUniqueRndKey (\:starMap testUni) 3\\n                           )" "(placeSystems testUni 3)" "testUni" "(\:starMap testUni )" "(first (\:starMap testUni))" "(type (first (\:starMap testUni)))" "(second \\n  (\:starMap testUni))" "(createMap [20 20])" "(getModPos [2 1 3])" " (getModPos 2 1 3)" "(getModPos 2 2 3)" "(rem 12 3)" "(rem 4 7)" "(rem 11 7)" "(rem 7 3)" "(mod 7 1)" "(mod 7 3)" "(rem 7 3)" "(mod 6 3)" "(rem 6 3)" "(mod 7 3)" "(mod 6 3)" "(rem 6 3)" "(/ 6 3)" "(getCoordPos 4 3)" "(mod 4 3)" "(mod 7\\n     3)" "(- 7 (* 3(mod 7 3)))" "(- 7 (* 3(rem 7 3)))" "(mod 7 3)" "(/ 7 3)" "(rem 7 3)" "(java.lang.Math/floorDiv 7 3)" " (java.lang.Math/floorDiv 5 3)" "(getCoordPos 8 3)" "(getCoordPos 3 3)" "(getCoordPos 7\\n             3)" "(getCoordPos 2 3)" "(getCoordPos 6\\n             3)" "(createMap [20 20])" "testUni" "(placeSystems testUni 3)" "(\:starMap testUni)" "(test.util/getUniqueRndKey (\:starMap testUni) 2)" "(placeSystems testUni 3)" "testUni" "(placeSystems testUni 3)" "testUni" " (createSystem (rand-nth systemName))" "(placeSystems testUni 3)" "(\:starMap testUni)" "(first (\:starMap testUni))" " (second (first (\:starMap testUni)))" "(send (second (first (\:starMap testUni))) (createSystem (rand-nth systemName)))" "(send (second (first (\:starMap testUni))) createSystem (rand-nth systemName))" "(createSystem)" " (send (second (first (\:starMap testUni))) createSystem )" " (second (first (\:starMap testUni)))" " (send (second (first (\:starMap testUni))) 3 )" " (send (second (first (\:starMap testUni))) \#(3) )" " (send (second (first (\:starMap testUni))) \#('3) )" " (send (second (first (\:starMap testUni))) createSystem )" " (second (first (\:starMap testUni)))" " (send (second (first (\:starMap testUni))) 'createSystem )" "(second (first (\:starMap testUni)))" "(createSystem 22)" "testUni" " (send (second (first (\:starMap testUni))) 'createSystem )" " (send (second (first (\:starMap testUni))) '3 )" "(second (first (\:starMap testUni)))" " (send (second (first (\:starMap testUni))) \#(\\"dasf\\") )" " (send (second (first (\:starMap testUni))) '\#(\\"asdf\\") )" "testUni" "(placeSystems testUni 2)" "testUni" "(createSystem)" "(createSystem [2])" "(deref (second (first (\:starMap testUni))) )" " (send (second (first (\:starMap testUni))) 'createSystem )" "testUni" " (send (second (first (\:starMap testUni))) 'createSystem )" "testUni" " (send (second (first (\:starMap testUni))) createSystem )" "testUni" "(placeSystems testUni 3)" "(placeSystems testUni 2)" "(placeSystems testUni 3)" "testUni" "(placeSystems testUni 5)" "testUni" "(\:starMap testUni)" "(first (\:starMap testUni))" "(second (\:starMap testUni))" "(placeSystems testUni 7)" "testUni" "(\:starMap testUni)" "(first (\:starMap testUni))" "(second (\:starMap testUni))" "(getAllSystems testUni)" "(placeSystems testUni 5)" "testUni" "(getAllSystems testUni)" "(\:starMap testUni)" "(first (\:starMap testUni))" "(first (first (\:starMap testUni)))" " (second (first (\:starMap testUni)))" "(getAllSystems testUni)" "testUni" "(placeSystems testUni 2)" "testUni" "(reduce \#(println %1) (range 1e2))" "(reduce \#(println %1 %2) (range 1e2))" "testUni" "(placeSystems testUni 3)" "testUni" "(getAllSystems testUni)" " (getAllSystems testUni)" "testUni" "(placeSystems testUni 3)" "(getAllSystems testUni)" "testUni" "(getAllSystems testUni)" "(first (\:starMap testUni))" "(seond (first (\:starMap testUni)))" "(second (first (\:starMap testUni)))" "(getAllSystems testUni)" "(deref (first (\:starMap testUni)))" "(deref(second (first (\:starMap testUni))))" "(deref(second (second (\:starMap testUni))))" "(second (second (\:starMap testUni)))" "(second (nth (\:starMap testUni)) 5)" "(second (nth (\:starMap testUni) 5))" "(second (nth (\:starMap testUni) 4))" "testUni" "(placeSystems testUni 7)" "testUni" "(getAllSystems testUni)" " (getAllSystems testUni)" "(getAllSystems testUni)" "(nth (\:starMap testUni) 4)" " (nth (\:starMap testUni) 3)" "testUni" "(placeSystems testUni 3)" "testUni" "(getAllSystems testUni)" "testUni" "(getAllSystems testUni)" "testUni" "(placeSystems testUni 5)" "testUni" "(placeSystems testUni 5)" "testUni" "(placeSystems testUni 3)" "testUni" "(count testUni)" "(count (\:starMap testUni))" "(root 9)" "(Math/root 9)" "(Math/sqrt 9)" "size" "uniSize" "(data/->XYPoint [1 1])" "uniSize" "size" "uniSize" "(\:pos uniSize)" "(\:coords (\:pos uniSize))" "(first (\:coords (\:pos uniSize)))" "testUni" "(makeXYPoint 3 3)" "(data/makeXYPoint 3 3)" "(assoc [1 2 3] 1 \\"dsf\\")" "(assoc [1 2 3] 0\\n       \\"dsf\\")" "testUni" "(getAllSystems testUni)" "(placeSystems testUni 5)" "testUni" "(getAllSystems testUni)" "(placeSystems testUni 5)" "testUni" "(getAllSystems testUni )" "testUni" "(placeSystems testUni 5)" "(getAllSystems testUni)" "(placeSystems testUni 3)" "(getAllSystems testUni)" "testUni" "(getAllSystems testUni)" "testUni" "(placeSystems testUni 5)" "(getAllSystems testUni)" "testUni" "(placeSystems testUni 5)" "(getAllSystems testUni)" "(placeSystems testUni 5)" "(getAllSystems testUni)" "testUni" "(first testUni)" "(\:starMap (first testUni))" "(\:starMap testUni)" "(nth (\:starMap testUni) 3)" "(second (nth (\:starMap testUni) 3))" "(deref (second (nth (\:starMap testUni) 3)))" "(placeSystems testUni 5)" "(getAllSystems testUni )" "(placeSystems testUni 5)" "(getAllSystems testUni)" "(placeSystems testUni 5)" "(getAllSystems testUni)" "asd" "(when asd\\n  \\"asdf\\")" " (when (deref asd)\\r\\n     \\"asdf\\")" "(send asd \\"dsaf\\")" "asd" "(send asd \#(\\"dsaf\\"))" "(send asd \#(5))" "(send asd \#(when-not %1 \\n             22))" "asd" "(send asd (fn [a]\\n            \\"dsaf\\"\\n            ))" "(send asd (fn [a]\\r\\n            [12 3]\\r\\n            ))" "(send asd '(fn [a]\\r\\n            \\"dsaf\\"\\r\\n            ))" "(send asd (fn [a]\\r\\n            \\"dsaf\\"\\r\\n            ))" "asd" "(send asd \#(when %1\\n             \\"dsaf\\"))" "asd" "(send asd \#(when %1\\r\\n                \\"asfdasfd\\"))" "asd" "(when (deref asd)\\n  \\"sdfs\\")" "(placeSystems testUni 5)" "testUni" "(getAllSystems testUni)" " (getAllSystems testUni)" "(getAllSystems testUni )" "(placeSystems testUni 3)" "testUni" "(getAllSystems testUni)" "(placeSystems testUni 5)" "(getAllSystems testUni )" "(\:starMap testUni)" "(nth (\:starMap testUni) 4)" "(nth (\:starMap testUni) 3)" "(second (nth (\:starMap testUni) 3))" "(nil? (second (nth (\:starMap testUni) 3)))" "(when (second (nth (\:starMap testUni) 3))\\n  \\"asdf\\")" "(deref (second (nth (\:starMap testUni) 3)))" "(when (deref (second (nth (\:starMap testUni) 3)))\\n  \\"fdsaf\\")" "(getAllSystems testUni)" "(placeSystems testUni 3)" "(getAllSystems testUni)" "(placeSystems testUni 6)" "ptest" "(getAllSystems ptest)" "ptest" "(getAllSystems ptest)" "(\:starMap ptest)" "(getAllSystems ptest)" "(getAllSystems testUni)" " (getAllSystems testUni)" "testUni" " (getAllSystems testUni)" "(getAllSystems testUni)" "(first (getAllSystems testUni))" "(type (first (getAllSystems testUni)))" "testUni" "bQuad" "(getAllElements q)" "(zip/node bQuad)" "(zip/node zipCr)" "(getAllElements zipCr)" "(send zipAg getAllElements)" "(time (send zipAg getAllElements))" "zipAg" "(send zipAg getAllElements)" "zipAg" "@zipAg" "zipAg" "(getAllElements @zipAg)" "zipAg" "(time (getAllElements @zipAg))" "(use 'clj-quadtree.demo)\\r\\n(run-demo)" "(paintloop)" "(paintLoop)" "bQuad" "zipAg" "(time (bQuad q))" "(time '(bQuad q))" "(time '(dotimes[nr 100]\\n         (bQuad q)\\n         ))" "(time '(dotimes[nr 1000]\\r\\n            (bQuad q)\\r\\n            ))" "(time '(dotimes[nr 10000]\\r\\n               (bQuad q)\\r\\n               ))" "(time '(dotimes[nr 1000]\\r\\n               (bQuad q)\\r\\n               ))" "(time '(dotimes[nr 10000]\\r\\n               (bQuad q)\\r\\n               ))" "(time '(dotimes[nr 1000000]\\r\\n               (bQuad q)\\r\\n               ))" "(time '(dotimes[nr 10000]\\r\\n               (println (bQuad q))\\r\\n               ))" "(dotimes[nr 10000]\\r\\n                  (println (bQuad q))\\r\\n                  )" "(dotimes[nr 10000]\\r\\n                   (bQuad q)\\r\\n                  )" "(dotimes[nr 10000]\\r\\n                  (println (buildQuadTree q))\\r\\n                  )" "(time '(dotimes[nr 10000]\\r\\n                  (println (buildQuadTree q))\\r\\n                  ))" "(dotimes[nr 10000]\\r\\n                   (buildQuadTree q)\\r\\n                  )" "(println \\"asdf\\")" "(time '(dotimes[nr 10000]\\r\\n                      (buildQuadTree q)\\r\\n                     ))" "(time '(dotimes[nr 10000]\\r\\n                         (buildQuadTree q)\\r\\n                        ))" "(buildQuadTree q)" "(time '(dotimes[nr 100000]\\r\\n                         (buildQuadTree q)\\r\\n                        ))" "(time '(dotimes[nr 1000000]\\r\\n                            (buildQuadTree q)\\r\\n                           ))" "(time (dotimes[nr 1000]\\r\\n                            (buildQuadTree q)\\r\\n                           ))" "(time (dotimes[nr 100]\\r\\n                               (buildQuadTree q)\\r\\n                              ))" "(time (dotimes[nr 100]\\r\\n                                  (buildQuadTree q)\\r\\n                                 ))" "(let [exec (java.util.concurrent.Executors/newSingleThreadExecutor)\\r\\n      service (fn [a b clbk] ; an asynchronous service\\r\\n                  (.execute exec ^Runnable (fn []\\r\\n                                              (sleep 50)\\r\\n                                              (clbk (+ a b)))))\\r\\n      fiber (spawn-fiber\\r\\n              (fn []\\r\\n                (await service 2 5)))]\\r\\n   (join fiber))" "(let [exec (java.util.concurrent.Executors/newSingleThreadExecutor)\\r\\n      service (fn [a b clbk] ; an asynchronous service\\r\\n                  (.execute exec ^Runnable (fn []\\r\\n                                              (Thread/sleep 50)\\r\\n                                              (clbk (+ a b)))))\\r\\n      fiber (spawn-fiber\\r\\n              (fn []\\r\\n                (await service 2 5)))]\\r\\n   (join fiber))" "(defrecord MyTest [a b c])" "(MyTest 1 2 3)" "(MyTest. 1 2 3)" "(->MyTest 1 2 3)" "(->MyTest 1)" "bQuad" "(time (dotimes [n 100] \\n        (buildQuadTree q)\\n        \\n        ))" "(time (dotimes [n 10]\\r\\n           (buildQuadTree q)\\r\\n           \\r\\n           ))" "(time \\r\\n           (buildQuadTree q)\\r\\n           \\r\\n           )" "(time \\r\\n           (buildQuadTree q)\\r\\n           \\r\\n           \\n           )" "(time (dotimes [n 100]\\n        (buildQuadTree q)\\n        ))" "(time (dotimes [n 100]\\r\\n           (buildQuadTree q)\\r\\n           ))" "(buildQ {\:depth 0 \:maxDepth 4 \:c nil})" "(time (dotimes [n 100]\\n        (buildQ {\:depth 0 \:maxDepth 4 \:c nil})))" "(buildQ (TestNode. 0 4 nil))" "(times (dotimes [n 100]\\n         (buildQ (TestNode. 0 4 nil))\\n         ))" "(time (dotimes [n 100]\\r\\n            (buildQ (TestNode. 0 4 nil))\\r\\n            ))" "(time (dotimes [n 100]\\r\\n               (buildQ (TestNode. 0 4 nil))\\r\\n               ))" "(TestNode2 1 2 3)" "(TestNode2. 1 2 3)" "(\:d (TestNode2 1 2 3))" "(\:d (TestNode2.\\n      1 2 3))" "(.d (TestNode2 1 2 3))" "(.d (TestNode2. 1 2 3))" "(buildQ (TestNode2. 0 4 nil))" "(\:d (TestNode2. 1 2 3))" "(\:md (TestNode2. 1 2 3))" "(deftype Bar [a b c d e])\\r\\n(def b (Bar 1 2 3 4 5))" "\\n\\n\\r\\n(+ 4 3)" "(buildQ (TestNode2. 0 4 nil))" "(builQ 0 4)" "(buildQ 0 4)" "(doc deftype)" "(setC (TestNode2. 0 4 nil) 55)" "(.setC (TestNode2. 0 4 nil) 55)" "(.d (TestNode2. 1 2 3))" "(buildQ (TestNode2. 0 4 []))" "(.d (TestNode2. 0 4 []))" "(buildQ (TestNode2. 0 4 []))" "(TestNode2. 0 4 [])" "(buildQ (TestNode2. 0 4 []))" "(conj (.c (TestNode2 0 4 [])) \\"sadf\\")" "(conj (.c (TestNode2 0 4 [])\\n        ) \\"sadf\\")" "(setc  (TestNode2 0 4 []) \\"sadf\\")" "(setC  (TestNode2 0 4 []) \\"sadf\\")" "(setC  (TestNode2. 0 4 []) \\"sadf\\")" "(conj  (.c (TestNode2. 0 4 [])) \\"sadf\\")" "(buildQ (TestNode2. 0 4 []))" "(.c (buildQ (TestNode2. 0 4 [])))" "(.d (buildQ (TestNode2. 0 4 [])))" "(buildQ (TestNode2. 0 4 []))" "(.c (buildQ (TestNode2. 0 4 [])))" "(buildQ (TestNode2. 0 4 []))" "(.c (buildQ (TestNode2. 0 4 [])))" "\\n(buildQ (TestNode2. 0 4 []))" "(.d(.c (buildQ (TestNode2. 0 4 []))))" "(.c (buildQ (TestNode2. 0 4 [])))" "(first (.c (buildQ (TestNode2. 0 4 []))))" "(.d (first (.c (buildQ (TestNode2. 0 4 [])))))" "(first (.c (buildQ (TestNode2. 0 4 []))))" "(.d (first (.c (buildQ (TestNode2. 0 4 [])))))" "(first (.c (buildQ (TestNode2. 0 4 []))))" "(.d (first (.c (buildQ (TestNode2. 0 4 [])))))" "(first (.c (buildQ (TestNode2. 0 4 []))))" "(buildQ (TestNode2. 0 4 []))" "(first (.c (buildQ (TestNode2. 0 4 []))))" "(time (dotimes [n 100]\\n        (buildQ (TestNode2. 0 4 []))))" "(time (dotimes [n 100]\\r\\n           (buildQ (TestNode2. 0 4 []))))" "(.d(buildQ (TestNode2. 0 4 [])))" "(.c (buildQ (TestNode2. 0 4 [])))" "(second(.c (buildQ (TestNode2. 0 4 []))))" "(first (.c (buildQ (TestNode2. 0 4 []))))" "(.c (first (.c (buildQ (TestNode2. 0 4 [])))))" "(buildQ (TestNode2. 0 4 []))" "(time (dotimes [n 100] \\n        (buildQ (TestNode2. 0 4 []))\\n        ))" "(time (dotimes [n 100] \\r\\n           (buildQ (TestNode2. 0 4 []))\\r\\n           ))" "(time (dotimes [n 100] \\r\\n              (buildQ (TestNode2. 0 4 []))\\r\\n              ))" "(time (buildQuadTree q))" "(time (dotimes [n 1] (buildQuadTree q)))" "(time (dotimes [n 100] (buildQuadTree q)))" "(times (dotimes [n 100] (buildQ (TestNode2. 0 4 []))))" "(time (dotimes [n 100] (buildQ (TestNode2. 0 4 []))))" "(time (dotimes [n 100] (buildQuadTree q)))" "(.d (->TestNode2 0 4 []))" "(setC (->QuadNode 0 4 [] []) '[\\"asdf\\"])" "(.setC (->QuadNode 0 4 [] []) '[\\"asdf\\"])" "(describe QuadNode)" "(instance? 'test.quadTreeWithTypes.QuadNode (->QuadNode 0 4 [] []))" "(instance? 'test.quadTreeWithTypes.QuadNode (QuadNode. 0 4 [] []))" "(instance? 'test.quadTreeWithTypes.QuadNode '(QuadNode. 0 4 [] []))" "(type (QuadNode. 0 4 [] []))" "(instance? 'test.quadTreeWithTypes.QuadNode 5)" "(class? (->QuadNode 0 4 [] []))" "(type (->QuadNode 0 4 [] []) test.quadTreeWithTypes.QuadNode)" "(\= (type (->QuadNode 0 4 [] [])) test.quadTreeWithTypes.QuadNode)" "exampleQuad" "(.c exampleQuad)" "(zipperCreate exampleQuad)" "(zip/down (zipperCreate exampleQuad))" "(zip/node (zip/down (zipperCreate exampleQuad)))" "(.c (zip/node (zip/down (zipperCreate exampleQuad))))" "(.c (zip/node (zip/right(zip/down (zipperCreate exampleQuad)))))" " (zip/down (zip/node (zip/right(zip/down (zipperCreate exampleQuad)))))" " (zip/down (zip/right(zip/down (zipperCreate exampleQuad))))" "(time (dotimes [n 100]\\n        (zipperCreate exampleQuad)\\n        ))" "(time (dotimes [n 1000]\\r\\n           (zipperCreate exampleQuad)\\r\\n           ))" "(makeXYPoint [1 3])" "(makeXYPoint 1 3)" "(time (dotimes [n 100]\\n        (makeXYPoint 1 3)\\n        ))" "(time (dotimes [n 1000\\n                ]\\r\\n           (makeXYPoint 1 3)\\r\\n           ))" "(time (dotimes [n 100]\\r\\n           (matrix 1 3)\\r\\n           ))" "(time (dotimes [n 1000]\\r\\n              (matrix 1 3)\\r\\n              ))" "(time (dotimes [n 100]\\r\\n              [1 3]\\r\\n              ))" "(time (dotimes [n 100]\\r\\n              (->XYPoint 1 3)\\r\\n              ))" "(time (dotimes [n 100]\\r\\n                 (->XYPoint [1 3])\\r\\n                 ))" "(->Rectangle (->XYPoint [1 1])(->XYPoint [1 1]))" "(times (dotimes [n 100]\\n         (->Rectangle (->XYPoint [1 1])(->XYPoint [1 1]))\\n         ))" "(time (dotimes [n 100]\\r\\n         (->Rectangle (->XYPoint [1 1])(->XYPoint [1 1]))\\r\\n         ))" "(time (dotimes [n 1000]\\r\\n         (->Rectangle (->XYPoint [1 1])(->XYPoint [1 1]))\\r\\n         ))" "(constructBodyForAccess '(and \\r\\n        (>\= (first posP) (first posThis)) ;linke seite gr\u00F6\u00DFer als \u00E4u\u00DFeres\\r\\n        (<\= (+ (first sizeP) (first posP)) (+ (first sizeThis) (first posThis))) ;rechte seite kleiner als...\\r\\n        (>\= (second posP) (second posThis)) ;obere seite unter dem \u00E4u\u00DFeren\\r\\n        (<\= (+ (second sizeP) (second posP)) (+ (second sizeThis) (second posThis))) ; untere Seite \u00FCber dem \u00C4u\u00DFeren\\r\\n      ))" "(constructBodyForAccess '(and \\r\\n           (>\= (first posP) (first posThis)) ;linke seite gr\u00F6\u00DFer als \u00E4u\u00DFeres\\r\\n           (<\= (+ (first sizeP) (first posP)) (+ (first sizeThis) (first posThis))) ;rechte seite kleiner als...\\r\\n           (>\= (second posP) (second posThis)) ;obere seite unter dem \u00E4u\u00DFeren\\r\\n           (<\= (+ (second sizeP) (second posP)) (+ (second sizeThis) (second posThis))) ; untere Seite \u00FCber dem \u00C4u\u00DFeren\\r\\n         ))" "(macroexpand constructBodyForAccess)" "(macroexpand 'constructBodyForAccess)" "(Rectangle. [1 1])" "(XYPoint [1 1])" "(XYPoint. [1 1])" "(->XYPoint [1 1])" "q" "(.b q)" "(.size (.b q))" "(.coords (.size (.b q)))" "(.size (.b q))" "(->XYPoint [1 100])" "(.size (.b q))" "(.coords (.size (.b q)))" "(.size (.b q))" "(.b q)" "(split (Rectangle. (XYPoint. [1 11])(XYPoint. [1 11])))" "(buildQuadTree q)" "q" "(buildQuadTree q)" "q" "RectangleOps" "Rectangle" "(bark (Terrier.))" "(Terrier.)" "(bark (Terrier.))" "(split (Rectangle. (XYPoint. [1 1])(XYPoint. [55 55 ])))" "(Rectangle. (XYPoint. [1 1])(XYPoint. [55 55 ])\\n            )" "(split (makeRectangle ))" "(ns-imports 'test.dataTypesMatrix)" "(test.dataTypesMatrix/split (Rectangle. (XYPoint. [1 1])(XYPoint. [10 10])))" "(buildQuadTree q)" "q" "(.b q)" "(dTM/split (Rectangle. (XYPoint. [1 1])(XYPoint. [10 10])))" "q" "(buildQuadTree q)" "(macroexpand '(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\n                (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\n                (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                (< (+ (second posThis) (second sizeThis)) (second posP))))\\n                ))" "(macroexpand '(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                ))" "(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                   (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                   (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                   (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                   (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                   (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                   )" "(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                      (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                      (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                      (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                      (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                      (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                      )" "(macroexpand '(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                      (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                      (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                      (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                      (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                      (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                      ))" "(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                      (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                      (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                      (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                      (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                      (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                      )" "(macroexpand '(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                      (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                      (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                      (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                      (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                      (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                      ))" "(macroexpand '(asdf (println blub)))" "(asdf (println blub))" "(macroexpand '(asdf (println blub)))" "(asdf (println blub))" "(macroexpand '(asdf (println blub)))" "(asdf (println blub))" "(macroexpand '(asdf [1] (println blub)))" "(asdf [1] (println blub))" "(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                         (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                         (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                         (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                         (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                         (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                         )" "test.dataTypesMatrix.XYPoint/pos" "test.dataTypesMatrix.XYPoint.pos" "test.dataTypesMatrix.XYPoint/pos" "test.dataTypesMatrix.XYPoint/coords" "XYPoint" "test.dataTypesMatrix.Rectangle/pos" "test.dataTypesMatrix.Rectangle/const__0" "test.dataTypesMatrix.XYPoint/const__0" "test.dataTypesMatrix.XYPoint/getBasis" "test.dataTypesMatrix.Rectangle" "test.dataTypesMatrix.Rectangle/const__3" "test.dataTypesMatrix.Rectangle/const__27" "test.dataTypesMatrix.Rectangle/const__11" "(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                            (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                            (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                            (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                            (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                            (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                            )" "(macroexpand '(with-rec-access (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100]))\\r\\n                            (Rectangle. (XYPoint. [5 5])(XYPoint. [5 5]))\\r\\n                            (not (or (> (first posThis) (+ (first posP) (first sizeP)))\\r\\n                            (< (+ (first posThis) (first sizeThis)) (first posP))\\r\\n                            (> (second posThis) (+ (second posP) (second sizeP)))\\r\\n                            (< (+ (second posThis) (second sizeThis)) (second posP))))\\r\\n                            ))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 10000])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [100 101])))" "(time (dotimes [n 100]\\n        (within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))\\n        ))" "(time (dotimes [n 1000]\\r\\n           (within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))\\r\\n           ))" "(time (dotimes [n 100]\\r\\n           (within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))\\r\\n           ))" "(time (dotimes [n 100]\\r\\n              (trulyWithn? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))\\r\\n              ))" "(time (dotimes [n 10000]\\r\\n                 (trulyWithn? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))\\r\\n                 ))" "(time (dotimes [n 1000]\\r\\n                 (trulyWithn? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))\\r\\n                 ))" "(time (dotimes [n 100]\\r\\n              (within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))\\r\\n              ))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 0])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 -1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 0])(XYPoint. [1 1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [0 0])(XYPoint. [1 1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [0 0])(XYPoint. [0 0])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 0])(XYPoint. [0 0])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [0 1])(XYPoint. [0 0])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [0 0])(XYPoint. [1 0])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [0 0])(XYPoint. [0 1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 0])(XYPoint. [1 0])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [100 100])) (Rectangle. (XYPoint. [1 0])(XYPoint. [0 1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [2 2])) (Rectangle. (XYPoint. [0 0])(XYPoint. [0 0])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [2 2])) (Rectangle. (XYPoint. [1 0])(XYPoint. [0 1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [2 2])) (Rectangle. (XYPoint. [0 1])(XYPoint. [0 1])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [2 2])) (Rectangle. (XYPoint. [0 1])(XYPoint. [1 0])))" "(within? (Rectangle. (XYPoint. [1 1])(XYPoint. [2 2])) (Rectangle. (XYPoint. [1 1])(XYPoint. [1 1])))" "(buildQuadTree q)" "bQuad" "(zipperCreate bQuad)" "(zip/down (zipperCreate bQuad))" "(time (dotimes [n 100] \\n        (zipperCreate bQuad)\\n        ))" "(zipperCreate bQuad)" "(time (dotimes [n 1000] \\r\\n        (zipperCreate bQuad)\\r\\n        ))" "(zip/right (zip/down (zipperCreate bQuad)))" "(zip/node(zip/right (zip/down (zipperCreate bQuad))))" "(.b (zip/node(zip/right (zip/down (zipperCreate bQuad)))))" "(time (for [i (range 10)] \\n        (buildQuadTree q)\\n        \\n        ))" "(time (for [i (range 10)] \\r\\n        (buildQuadTree q)\\r\\n        \\r\\n        ))" "(time (for [i (range 10)] \\r\\n        (buildQuadTree q)\\r\\n        nil\\r\\n        ))" "(time (for [i 100000] \\r\\n           (buildQuadTree q)\\r\\n           ))" "(time (dotimes [i 100000] \\r\\n           (buildQuadTree q)\\r\\n           ))" "(println \\"sdf\\")" "(time (benchQnode 5))" "(time (benchQnode 100))" "(time (dotimes [n 100]\\n        (buildQuadTree q)\\n        ))" "(time (dotimes [n 10]\\r\\n           (buildQuadTree q)\\r\\n           ))" "(buildQuadTree q)" "(time (buildQuadTree q))" "(time (dotimes [n 100]\\r\\n           (buildQuadTree q)\\r\\n           ))" "(time (dotimes [n 100]\\r\\n              (buildQuadTree q)\\r\\n              ))" "(time (dotimes [n 100]\\r\\n                 (zipperCreate bQuad)\\r\\n                 ))" "(time (benchQnode 10))" "(time (benchQnode 1000))" "(zip/down (zipperCreate bQuad))" "(zip/left(zip/down (zipperCreate bQuad)))" "(zip/right(zip/down (zipperCreate bQuad)))" "(zip/node (zip/right(zip/down (zipperCreate bQuad))))" "(.b (zip/node (zip/right(zip/down (zipperCreate bQuad)))))" "(findWithBounds (zipperCreate bQuad) tR2)" "(zip/node (findWithBounds (zipperCreate bQuad) tR2))" "(.b (zip/node (findWithBounds (zipperCreate bQuad) tR2)))" "(.b (zip/node (findWithBounds (zipperCreate bQuad) tR3)))" "(zip/right(zip/down (zipperCreate bQuad)))" "(zip/down (zipperCreate bQuad))" "(zipperCreate bQuad)" "(zip/down (zipperCreate bQuad))" "(zip/up(zip/down (zipperCreate bQuad)))" "(zip/down (zipperCreate bQuad))" "(zip/up(zip/down (zipperCreate bQuad)))" "(zip/up (zip/up(zip/down (zipperCreate bQuad))))" "(zip/node (findWithBounds (zipperCreate bQuad) tR3))" "(findWithBounds (zipperCreate bQuad) tR3)" "(findWithBounds (zipperCreate bQuad) tR2)" "(zip/node (findWithBounds (zipperCreate bQuad) tR2))" "(.b (zip/node (findWithBounds (zipperCreate bQuad) tR2)))" "(findWithBounds (zipperCreate bQuad) tR2)" "(findWithBounds (zipperCreate bQuad) tR3)" "(findWithBounds (zipperCreate bQuad) tR2)" "(findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [20 6])))" "(.b (findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [20 6]))))" "(.b (zip/node(findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [20 6])))))" "(.b (zip/node(findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [20 7])))))" "(time (.b (zip/node(findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [20 7]))))))" "(within? tR tR2)" "(within? tR tR3)" "(within? tR2 tR3)" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [100 100])) (Rectangle. (XYPoint.  [6 1]) (XYPoint.  [1 6])))" "(within? (Rectangle. (XYPoint.  [6.25 6.25]) (XYPoint.  [12.5 12.5])) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [20 1])))" "(within? (Rectangle. (XYPoint.  [6.25 6.25]) (XYPoint.  [12.5 12.5])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 1])))" "(within? (Rectangle. (XYPoint.  [6.25 6.25]) (XYPoint.  [12.5 12.5])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 20])))" "(within? (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [12 12])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 20])))" "(within? (Rectangle. (XYPoint.  [6.25 6.25]) (XYPoint.  [12.5 12.5])) (Rectangle. (XYPoint.  [15 15]) (XYPoint.  [20 20])))" "(within? (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [12 12])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 20])))" "(within? (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [12 12])) (Rectangle. (XYPoint.  [7 7]) (XYPoint.  [20 20])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 20])) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [8 8])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 20])) (Rectangle. (XYPoint.  [21 21]) (XYPoint.  [22 22])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 20])) (Rectangle. (XYPoint.  [10 10]) (XYPoint.  [25 25])))" "(within? (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [5 5])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [3 3])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 20])) (Rectangle. (XYPoint.  [20 20]) (XYPoint.  [20 20])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [20 20])) (Rectangle. (XYPoint.  [18 18]) (XYPoint.  [20 20])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5])) (Rectangle. (XYPoint.  [5 5]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5])) (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5])) (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [6 6])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5])) (Rectangle. (XYPoint.  [4 4]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [5 5])) (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [2 2])))" "(within? (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [5 5])))" "(within? (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [3 3]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [2 2])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within?  (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5])))" "(within?  (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [0 0])))" "(within?  (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [1 0])))" "(within?  (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [1 1])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [0 0])))" "(within?  (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [0 0])))" "(within?  (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])))" "(macroexpand 'with-rec-access)" "(macroexpand '(ith-rec-access tR tR2))" "(macroexpand '(with-rec-access tR tR2))" "(with-rec-access tR tR2)" "(with-rec-access tR tR2 (println \\"sadf\\"))" "(with-rec-access tR tR2)" "(with-rec-access tR tR2 (println \\"asdf\\"))" "(with-rec-access tR tR2 (println maxRecBodyX))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [3 3])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [2 2])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [2 2])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [4 4])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [5 5])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [0 0])) (Rectangle. (XYPoint.  [1 1]) (XYPoint.  [1 1])))" "(within? tR tR2)" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [3 3])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [0 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [3 3])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [4 4])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [3 3])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [1 1])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [3 3])) (Rectangle. (XYPoint.  [2 0]) (XYPoint.  [1 0])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [3 3])) (Rectangle. (XYPoint.  [2 2]) (XYPoint.  [5 5])))" "(within? (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [1 1])) (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5])))" "(within?  (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5]))(Rectangle. (XYPoint.  [0 0]) (XYPoint.  [1 1])))" "(intersect?  (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5]))(Rectangle. (XYPoint.  [0 0]) (XYPoint.  [1 1])))" "(intersect?  (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5]))(Rectangle. (XYPoint.  [6 6]) (XYPoint.  [1 1])))" "(intersect?  (Rectangle. (XYPoint.  [0 0]) (XYPoint.  [5 5]))(Rectangle. (XYPoint.  [5 5]) (XYPoint.  [1 1])))" "(zipperCreate bQuad)" "(zip/node (zipperCreate bQuad))" "(zip/node (zip/down(zipperCreate bQuad)))" "(.b (zip/node (zip/down(zipperCreate bQuad))))" "(findWithBounds tr tR2)" "(findWithBounds tR tR2)" "(findWithBounds (zipperCreate bQuad) tR2)" "(.b (.zip/node (findWithBounds (zipperCreate bQuad) tR2)))" "(.b (zip/node (findWithBounds (zipperCreate bQuad) tR2)))" "(.b (.zip/node (findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [5 5])))))" "(.b (zip/node (findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [5 5])))))" "(.b (zip/node (findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [6 6]) (XYPoint.  [10 10])))))" "(.b (zip/node (findWithBounds (zipperCreate bQuad) (Rectangle. (XYPoint.  [10 10]) (XYPoint.  [2 2])))))" "(print-tree (zipperCreate bQuad))" "(zip/next (zipperCreate bQuad))" "(zip/next (zip/next (zipperCreate bQuad)))" "(zip/node (zip/next (zip/next (zipperCreate bQuad))))" "(.b (zip/node (zip/next (zip/next (zipperCreate bQuad)))))" "(.b (zip/node (zip/next (zip/next (zip/next(zipperCreate bQuad))))))" "(.b (zip/node (zip/next (zip/next (zip/next(zip/next(zipperCreate bQuad)))))))" "(.b (zip/node (zip/next (zip/next (zip/next (zip/next(zip/next(zipperCreate bQuad))))))))" "(print-tree(zipperCreate bQuad))"]
eclipse.preferences.version=1
