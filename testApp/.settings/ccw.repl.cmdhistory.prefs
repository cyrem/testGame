cmdhistory=[";; Switching to test.core namespace" "(println sysMap)" "(createMap 200 200)" "(createSystem \\"test\\")" "(createPlanet \\"test\\")" ";; Switching to test.core namespace" "(createSystem \\"sdf\\")" "(createMap 200 200)" ";; Switching to test.core namespace" "(getRandPos 200 200 @sysMap)" "(createMap 200 200)" "(type (placeSystems @sysMap 5))" "(type @sysMap)" "(createMap 200 200)" ";; Switching to test.core namespace" "(createMap 200 200)" "(placeSystems @sysMap 5)" "(println @sysMap)" "(createMap 200 200)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test.core)))" "(createMap 200 200)" "(reset\! sysMap nil)" "(createMap 200 200)" "(reset\! sysMap nil\\n        )" "(createMap 200 200)" "(reset\! sysMap nil)" "(createMap 200 200)" "(println (count sysMap))" "(println (count @sysMap))" "(createMap sysMap)" "(println @sysMap)" "(\:x @sysMap)" "(placeSystems @sysMap 5)" "(assoc (\:x @sysMap) 22)" "(assoc  @sysMap \:x 22)" "(placeSystems @sysMap 5)" ";; Switching to test.core namespace" "(createMap 200 200)" ";; Switching to test.core namespace" "(createMap 200 200)" "(take 5 \#(rand-nth {1 2 3 4 5 6 7 8 9}))" "(map \#(* % 2) (range 1 20))" "(take 20 (lazy-seq (placeSystems sysMap 5)))" "(take 20 (lazy-seq (placeSystems @sysMap 5)))" "(time (take 20 (lazy-seq (placeSystems sysMap 5))))" "(take 20 (lazy-seq (placeSystems @sysMap 5)))" "(time (take 20 (lazy-seq (placeSystems @sysMap 5))))" "(getUniqueRndKey 5 [1 2 3 4 5])" "(test.util/getUniqueRndKey 5 [1 2 3 4 5])" "(test.util/getUniqueRndKey 5 {1 2 3 4 5})" "(test.util/getUniqueRndKey 2 {1 2 3 4 5})" "(test.util/getUniqueRndKey 2 {1 2 3 4 5 6})" "(test.util/getUniqueRndKey 2 \#{1 2 3 4 5 6})" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(test.util/getUniqueRndKey 2 (hash-map \\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"))" "(rand-nth (hash-map \\"1\\" \\"2\\"))" "(test.util/getUniqueRndKey 2 [\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"])" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(keys {\\"1\\" \\"2\\"})" "(rand-nth  (keys {\\"1\\" \\"2\\"}))" "(dissoc (keys {\\"1\\" \\"2\\" \\"3\\" \\"4\\"}) \\"2\\")" "(test.util/getUniqueRndKey 2 [\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"])" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(assoc [3 3 3 3] 5)" "(assoc [3 3 3 3] 5 33)" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"})" "(rand-nth (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(assoc (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"jhdfdjshj\\" \\"dfksahjasdgfdg\\")" "(lazy-seq (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"jhdfdjshj\\" \\"dfksahjasdgfdg\\")" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) )" "(test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"})" "(rand-nth (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(dissoc (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(dissoc apply (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(dissoc (apply test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(dissoc (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")) \\"asdf\\")" "(type (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")))" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(rand-nth (keys (hash-map \\"1\\" \\"2\\")))" "(type (keys (hash-map \\"1\\" \\"2\\")))" "(assoc (keys (hash-map \\"1\\" \\"2\\")\\"3\\" \\"4\\")\\n       )" "(assoc (keys (hash-map \\"1\\" \\"2\\"))\\"3\\" \\"4\\")" "(conj (keys (hash-map \\"1\\" \\"2\\"))\\"3\\" \\"4\\")" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(test.util/getUniqueRndKey 1 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(time (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")))" ";; Switching to test.map namespace"]
eclipse.preferences.version=1
