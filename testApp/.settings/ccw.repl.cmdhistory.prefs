cmdhistory=[";; Switching to test.core namespace" "(println sysMap)" "(createMap 200 200)" "(createSystem \\"test\\")" "(createPlanet \\"test\\")" ";; Switching to test.core namespace" "(createSystem \\"sdf\\")" "(createMap 200 200)" ";; Switching to test.core namespace" "(getRandPos 200 200 @sysMap)" "(createMap 200 200)" "(type (placeSystems @sysMap 5))" "(type @sysMap)" "(createMap 200 200)" ";; Switching to test.core namespace" "(createMap 200 200)" "(placeSystems @sysMap 5)" "(println @sysMap)" "(createMap 200 200)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test.core)))" "(createMap 200 200)" "(reset\! sysMap nil)" "(createMap 200 200)" "(reset\! sysMap nil\\n        )" "(createMap 200 200)" "(reset\! sysMap nil)" "(createMap 200 200)" "(println (count sysMap))" "(println (count @sysMap))" "(createMap sysMap)" "(println @sysMap)" "(\:x @sysMap)" "(placeSystems @sysMap 5)" "(assoc (\:x @sysMap) 22)" "(assoc  @sysMap \:x 22)" "(placeSystems @sysMap 5)" ";; Switching to test.core namespace" "(createMap 200 200)" ";; Switching to test.core namespace" "(createMap 200 200)" "(take 5 \#(rand-nth {1 2 3 4 5 6 7 8 9}))" "(map \#(* % 2) (range 1 20))" "(take 20 (lazy-seq (placeSystems sysMap 5)))" "(take 20 (lazy-seq (placeSystems @sysMap 5)))" "(time (take 20 (lazy-seq (placeSystems sysMap 5))))" "(take 20 (lazy-seq (placeSystems @sysMap 5)))" "(time (take 20 (lazy-seq (placeSystems @sysMap 5))))" "(getUniqueRndKey 5 [1 2 3 4 5])" "(test.util/getUniqueRndKey 5 [1 2 3 4 5])" "(test.util/getUniqueRndKey 5 {1 2 3 4 5})" "(test.util/getUniqueRndKey 2 {1 2 3 4 5})" "(test.util/getUniqueRndKey 2 {1 2 3 4 5 6})" "(test.util/getUniqueRndKey 2 \#{1 2 3 4 5 6})" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(test.util/getUniqueRndKey 2 (hash-map \\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"))" "(rand-nth (hash-map \\"1\\" \\"2\\"))" "(test.util/getUniqueRndKey 2 [\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"])" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(keys {\\"1\\" \\"2\\"})" "(rand-nth  (keys {\\"1\\" \\"2\\"}))" "(dissoc (keys {\\"1\\" \\"2\\" \\"3\\" \\"4\\"}) \\"2\\")" "(test.util/getUniqueRndKey 2 [\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"])" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(assoc [3 3 3 3] 5)" "(assoc [3 3 3 3] 5 33)" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"})" "(rand-nth (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(assoc (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"jhdfdjshj\\" \\"dfksahjasdgfdg\\")" "(lazy-seq (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"jhdfdjshj\\" \\"dfksahjasdgfdg\\")" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) )" "(test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"})" "(rand-nth (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(dissoc (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(dissoc apply (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(dissoc (apply test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(dissoc (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")) \\"asdf\\")" "(type (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")))" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(rand-nth (keys (hash-map \\"1\\" \\"2\\")))" "(type (keys (hash-map \\"1\\" \\"2\\")))" "(assoc (keys (hash-map \\"1\\" \\"2\\")\\"3\\" \\"4\\")\\n       )" "(assoc (keys (hash-map \\"1\\" \\"2\\"))\\"3\\" \\"4\\")" "(conj (keys (hash-map \\"1\\" \\"2\\"))\\"3\\" \\"4\\")" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(test.util/getUniqueRndKey 1 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(time (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")))" ";; Switching to test.map namespace" ";; Switching to test.util namespace" "(getUniqueRndKey 5 (hash-map \\"1\\" \\"2\\" \\"3\\" \\"4\\"))" "(getUniqueRndKey 1 (hash-map \\"1\\" \\"2\\" \\"3\\" \\"4\\"))" "(type (getUniqueRndKey 1 tmap))" "(rand-nth (getUniqueRndKey 1 tmap))" "(getUniqueRndKey 1 tmap)" "(assoc [] \\"dsf\\")" "(getUniqueRndKey 1 tmap)" "(getUniqueRndKey 2 tmap)" "(getUniqueRndKey 3 tmap)" ";; Switching to test.map namespace" "(createMap 200 200 50)" "(placeSystems 5)" "(createSystem \\"test\\")" "(take (util/rand-int1 4) (createPlanet))" "(createPlanet)" "(take (util/rand-int1 4) (createPlanet))" "(createSystem \\"asdf\\")" "(createPlanet)" "(createSystem \\"asdf\\")" "(hash-map 1 \\"2\\")" "(test.map/createSystem \\"asdf\\")" "(test.map/placeSystems 4)" "(for [x 10]\\n  (println x))" "(for [x [1 2 3 4 5 6]]\\r\\n     (println x))" "(range 5)" "(map \#(println %) (range 3))" "(test.map/createSystem \\"asdf\\")" " (test.map/createSystem \\"asdf\\")" "(repeat 4 (test.map/createPlanet))" "(take 4 (test.map/createPlanet))" "(dotimes [_ 5]\\n  (test.map/createPlanet))" "(dotimes [x 5]\\r\\n     (test.map/createPlanet))" "(into [] (dotimes [x 5]\\r\\n        (test.map/createPlanet)))" "(for [_ (range 5)]\\n  (test.map/createPlanet)\\n  )\#" "(for [_ (range 5)]\\r\\n     (test.map/createPlanet)\\r\\n     )" "(into [] (for [_ (range 5)]\\r\\n     (test.map/createPlanet)\\r\\n     ))" "(test.map/createSystem \\"sdf\\")" "(hash-map \\"2\\" (agent nil))" "(test.map/createSystem \\"sdf\\")" "(+ 2 2)" ";; Switching to test.map namespace" "(placeSystem 5)" "(placeSystems 3)" "(take 2 (placeSystems 3))" "(take 1 (placeSystems 3))" "(take 2 (apply placeSystems 3))" "(take 2 (apply placeSystems '3))" "(take 2 (lazy-seq (placeSystems 3) ))" "(testM planet \\"sd\\" 5 \\"sdff\\")" "(testM \\"planet\\" \\"sd\\" 5 \\"sdff\\")" "(testM \\"dfsfa\\" 33 332 22)" "(testM [\\"dfsfa\\"] 33 332 22)" " (testM [\\"dfsfa\\"] 33 332 22)" " (testM [\\"dfsfa\\"] 33)" "(testM [\\"blah\\"] 22)" ";; Switching to test.map namespace" "(testM [\\"blah\\"] 22)" "(testM [planet] 22 11 33)" " (testM [planet] '(22 11 33))" "(hash-map '[2 2] \\"sdf\\")" "(\: [2 2] (hash-map '[2 2] \\"sdf\\"))" "(\:'[2 2] (hash-map '[2 2] \\"sdf\\"))" "(get (hash-map '[2 2] \\"sdf\\") [2 2])" "('[2 2] (hash-map '[2 2] \\"sdf\\"))" "(\#'[2 2] (hash-map '[2 2] \\"sdf\\"))" "(createMap [20 20])" "(createMap [5 5])" "(dotimes [2 2])" "(dotimes \\n  '[2 2])" "(dotimes [2 2])" "(createMap [3 3])" ";; Switching to test.map namespace" "(createMap [20 20])" "(get (createMap [20 20]) [5 5])" "(test.util/getUniqueRndKey 10 (createMap [20 20]))" "(placeSystems 20 testUni)" "testUni" "(get testUni [15 6])" "(get testUni [9 6])" "(get (\:starMap testUni)  [15 6])" "(get (\:starMap testUni)  [9 6])" "(get (\:starMap testUni)  [5 2])" "(get (\:starMap testUni)  [15 6])" "testUni" "(\:starMap testUni)" "(println (get (\:starMap testUni) [17 15] ) )" "(\:starMap testUni)" "(get  (\:starMap testUni) [10 7])" ";; Switching to test.core namespace" "(run \:dispose)" "(run \:dispose\\n     )" "(run \:dispose)" ";; Switching to test.core namespace" "(-> gameWindow pack\! show\!)" ";; Switching to test.core namespace" "(-> gameWindow pack\! show\!)" "(draw img)" "(-> gameWindow pack\! show\!)" " (-> gameWindow pack\! show\!)" ";; Switching to test.core namespace" " (-> gameWindow pack\! show\!)" "(-> gameWindow pack\! show\!)" "(-> gameWindow show\!)" ";; Switching to test.core namespace" "(+ 2 2)" "(show\! gameWindow)" "(Canvas.\\n  )" "(Canvas.)" "(show\! gameWindow)" "(+ 2 2)" "pan" "(show\! gameWindow)" "(config pan)" "(config pan \:paint)" "(config pan \:id)" "(config\! pan \:paint \#(draw (.drawImage img)))" "(show\! gameWindow)" "img" "(show\! gameWindow)" " (show\! gameWindow)" "img" "(show\! gameWindow)" "img" "(.drawImage)" "(.drawImage img 10 10 nil)" "(show\! gameWindow)" "(paintLoop \\"dsf\\" \\"sdakl\\")" "(time (paintLoop \\"dsf\\" \\"sdakl\\"))" "gameWindow" "(\:content gameWindow)" "objL" "(time (println objL))" "but" "@objL" "(type @objL)" "(show\! gameWindow)" "objL" "@objL" "(doseq [i @objL]\\n  (println (\:img i)))" "(doseq [i @objL]\\r\\n     (println i))" "(doseq [i @objL]\\r\\n     (println (\:img @i)))" "(show\! gameWindow)" "(nth [1 2 3 4 5] 5)" "(nth [1 2 3 4 5] 3)" "(nth [1 2 3 4 5] 0)" "@objL" "(count @objL)" "objL" "@objL" "(show\! gameWindow)" "(nth @objL 2)" "(nth @objL 1)" "(paintLoop gameWindow)" "(show\! gameWindow)" "(dosync (alter (nth @objL 0) moveObj [1 1]))" "(send (nth @objL 0) moveObj [1 1])" "(nth @objL 0)" "(paintLoop gameWindow)" "(mVec [800 600] [10 10])" ";; Switching to test.core namespace" "(mVec [800 600] [10 10])" "(mVec [800 600] [0 10])" "(paintLoop gameWindow)" ";; Switching to test.core namespace" "(paintLoop gameWindow)" "(> 30 30000)" "(paintLoop gameWindow)" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "(reset\! but (gObj. \\"sdfasf\\" img [0 0]))" "(send but (gObj. \\"sdfasf\\" img [0 0]))" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "objL" ";; Switching to test.core namespace" "objL" ";; Switching to test.core namespace" "objL" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "fsad" "(paintLoop)" "@objL" "(\:coords (nth @objL 1))" "(nth @objL 1)" "(\:coords @(nth @objL 1))" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "System/currentTimeMillis" "(System/currentTimeMillis)" "(currentTimeMillis)" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "@objL" "(paintLoop)" ";; Switching to test.core namespace" "@objL" "(send-off (nth @objL 0) moveObj)" "(moveObj (nth @objL 0))" "(moveObj @(nth @objL 0))" ";; Switching to test.core namespace" "(printLoop)" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(moveObj (nth objL 0))" "(moveObj (nth @objL 0))" "@objL" "(moveObj @(nth @objL 0))" "(send (nth @objL 0) moveObj)" "@objL" "(send (nth @objL 0) moveObj)" "@objL" "(send (nth @objL 0) moveObj)" "(map \#(send %) objL)" "(map \#(send %) @objL)" "(map \#(send % moveObj) @objL)" "(procGobjL objL)" "procGobjL" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "(reset\! running nil)" "@objL" ";; Switching to test.core namespace" "(paintLoop)" "(map \#(send % moveObj) @objL)" "(paintLoop)" "(paintloop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "@objL" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "img" "(.getWidth img)" "img" "(paintLoop)" "(rectCol [10 10] [20 20] [40 40] [50 50])" "(rectCol [10 20] [20 20] [40 40] [50 50])" "(rectCol [10 21] [20 20] [40 40] [50 50])" "(rectCol [10 10] [20 40] [40 40] [50 50])" "(rectCol [10 10] [20 41] [40 40] [50 50])" "(rectCol [10 10] [20 60] [40 40] [50 50])" "(rectCol [10 60] [20 60] [40 40] [50 50])" " (rectCol [10 10] [70 60] [40 40] [50 50])" "(rectCol [1 1] [2 2] [3 3] [4 4])" "(rectCol [1 1] [2 2] [2 2] [4 4])" "(rectCol [5 5] [7 7] [3 3] [9 9])" "(buildQuadTree tR)" "tR" "tR2" "(findWithBounds tR tR2)" "(findWithBounds rzip tR2)" "rzip" "(findWithBounds rzip tR2)" "(findWithBounds bsZip tR2)" "(time (findWithBounds bsZip tR2))" "bsZip" "(zip/next bsZip)" "(zip/next (zip/next bsZip))" "(zip/down bsZip)" "(zip/down (zip/down bsZip))" "(zip/right (zip/down bsZip))" "(buildQuadTree tR)" "tR" "(buildQuadTree tR)" "empty? []" "(println (empty? []))" "(buildQuadTree tR)" " (buildQuadTree tR)" "bsZip" " (buildQuadTree tR)" "(buildQuadTree bsZip)" "(paintLoop)" "(paintloop)" "(paintLoop)" "a" "(sas)" "(->XYPoint2 (matrix \:vectorz 1 1))" "(->XYPoint2 (matrix \:vectorz [3 3]))" "(->XYPoint2 (matrix [3 3]))" "(->XYPoint2 (matrix [1 2]))" "(->XYPoint2 (matrix [1 22 2]))" "(/ 2 (matrix [20 20]))" " (* 2 (matrix [20 20]))" "(/ 2 (matrix [20 20]))" "(/ (matrix [20 20]) 2)" "(* (matrix [20 20]) [4 5])" "(+ (matrix [20 20]) [4 5])" "(* (matrix [20 20]) (matrix [4 5]))" "(split tR)" "tR" "(split tR)" "(\:size tR)" "(\:coords (\:size tR))" "(\:pos tR)" "(\:coords (\:pos tR))" "tR" "(split tR)" " (split tR)" "(split tR)" " (split tR)" "(< (matrix [1 1]) (matrix [4 4] ))" "(first (matrix [1 3]))" "(within? tR tR2)" "(\:pos tR)" "(\:size tR)" " (within? tR tR2)" " (within? tR2 tR2)" " (within? tR2 tR)" "(intersect? tR tR2)" "tR" "tR2" "(getSector tR tR2)" "(getSector tR2 tR)" " (getSector tR2 tR)" "(getSector tR2 tR)" "(getSector tR tR2)" "(getSector tR2 tR)" "(getSector tR tR)" "(within? tR tR2)" "(within? tR2 tr)" "(within? tR2 tR)" "(within? tR tR)" "(getSector tR tR)" "(getSector tR tR)\\r\\nIndexOutOfBoundsExcepti" "(getSector tR tR)" "(getSector tR tR2)" "tR" "tR2" "(getSector tR tR2)" "(time (getSector tR tR2))" "rZip" "rzip" "(subDivide rzip)" "(findWithBounds rzip tR2)" "(findWithBounds (split rzip) tR2)" "(findWithBounds (subDivide rzip) tR2)" "(findWithBounds bsZip tR2)" "(buildQuadTree bsZip)" "(buildQuadTree tR)" "(buildQuadTree q)" " (buildQuadTree q)" "(buildQuadTree q)" "(getSector tR (->XYPoint (matrix [5 5])))" "(getSector tR (matrix [5 5]))" "(getSector tR  [5 5])" "(getSector tR tR2)" "(getSector tR2 tR)" "(subDivide tR)" "(subDivide rzip)" "rtest" "bsZip" "(root bsZip)" "(zip/root bsZip)" "bsZip" "(zipperCreate (zip/root bsZip))" "(time (zipperCreate (zip/root bsZip)))" "bsZip" "(buildQuadTree q)" "bsZip" "(zip/root bsZip)" "(zip/down bsZip)" "(\:c bsZip)" "bsZip" "q" "rtest" "(\:c rtest)" "(\:c (zip/node bsZip))" "(type (\:c (zip/node bsZip)))" "(type [])" "(buildQuadTree q)" "(\:c (buildQuadTree q))" "(buildQuadTree q)" "(\:c (buildQuadTree q))" "(first (\:c (buildQuadTree q)))" "(doall (map + [1 2 3 4]))" "(doall (map + [1 2 3 4] [2 3 4 5]))" "(type (doall (map + [1 2 3 4] [2 3 4 5])))" "(buildQuadTree q)" "bQuad" "zipAg" "(findWithBounds bQuad tR2)" "(findWithBounds bQuad tR)" "(findWithBounds zipCr tR2)" "(time (findWithBounds zipCr tR2))" "(findWithBounds zipCr tR2)" "(zip/down (findWithBounds zipCr tR2))" "(zip/next (zip/down (findWithBounds zipCr tR2)))" "(getAllElements zipCr)" "(instance? q)" "(getAllElements (findWithBounds zipCr tR2))" " (getAllElements (findWithBounds zipCr tR2))" "(instance? q)" "(instace? test.quadTree.QuadNode q)" " (instance? test.quadTree.QuadNode q)" "(getAllElements zipCr)" "(instance? 'test.quadTree.QuadNode q)" "(instance? test.quadTree.QuadNode q)" "bQuad" "(zip/down bQuad)" "(zip/down zipCr)" "(time (zip/down zipCr))" "(zip/down zipCr)" "bQuad" "(zip/next zipCr)" "(zip/next (zip/next zipCr))" "(zip/next (zip/next (zip/next zipCr)))" "(zip/next (zip/next (zip/next (zip/next zipCr))))" " (zip/next (zip/next (zip/next zipCr)))" "(zip/next  (zip/next (zip/next (zip/next zipCr))))" "(zip/next tree-z)" "(zip/next (zip/next tree-z))" "(zip/next (zip/next (zip/next tree-z)))" "(zip/next (zip/next (zip/next (zip/next tree-z))))" "(zip/next (zip/next (zip/next (zip/next (zip/next tree-z)))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next tree-z))))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next tree-z)))))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next tree-z))))))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next (zip/next tree-z)))))))))" "(zip/next zipCr)" "(zip/next (zip/next zipCr))" "(zip/next (zip/next (zip/next zipCr)))" "(zip/next (zip/next (zip/next (zip/next zipCr))))" "(zip/next (zip/next (zip/next (zip/next (zip/next zipCr)))))" "(zip/next (zip/next (zip/next (zip/next (zip/next (zip/next zipCr))))))" "(getAllElements zipCr)" " (getAllElements zipCr)" "(buildQuadTree zipCr)" "(getAllElements zipCr)" " (getAllElements zipCr 0)" "zipCr" "(zip/next zipCr)" "(zip/next (zip/next zipCr))" "(zip/down (zip/next (zip/next zipCr)))" "(zip/right (zip/next (zip/next zipCr)))" "(zip/right (zip/next zipCr))" "(zip/right (zip/right (zip/next zipCr)))" "zipCr" "(getAllElements zipCr)" "(getAllElements zipCr 0)" "(zip/next zipCr)" "(zip/next (zip/next zipCr))" "(zip/next zipCr)" "(getAllElements zipCr 0)" "(findWithBounds zipCr tR)" "(findWithBounds zipCr tR2)" "zipCr" "(zip/down zipCr)" "(zip/down (zip/down zipCr))" " (zip/down zipCr)" "(zip/down (zip/down zipCr))" "(zip/down (zip/down (zip/down zipCr)))" "(zip/right (zip/down zipCr))" "(zip/right (zip/right (zip/down zipCr)))" "(zip/right (zip/right (zip/right (zip/down zipCr))))" "(findWithBounds zipCr tR2)" "(getAllElements zipCr 0)" "zipCr" "(time zipCr)" "(insert zipCr tR2)" "(mapv \#(\:o %1) zipCr)" "(zip/vector-zip zipCr)" "(zip-map \#(println %1) zipCr)" " (zip-map \#(println %1 %2) zipCr)" "(zip-map (fn [n nx] println n) zipCr)" "(zip-map (fn [n nx] println nx) zipCr)" "(zip-map (fn [n nx] println n) zipCr)" "(zip-map (fn [n nx] println (\:o n)) zipCr)" "(zip-map (fn [n nx] println (\:o n)) (insert zipCr tR2))" "(zip-map (fn [n nx] println (\:c n)) (insert zipCr tR2))" "(zip-map (fn [n nx] println (\:o nx)) (insert zipCr tR2))" "(zip-map (fn [n nx] println (type nx)) (insert zipCr tR2))" "(zip-map (fn [n nx] println (type n)) (insert zipCr tR2))" "(zip-map (fn [n nx] println  nx) (insert zipCr tR2))" "(getAllElements zipCr)" "(getAllElements (insert zipCr tR2))" "(insert zipCr tR2)" "(findWithBounds zipCr tR2)" "(insert zipCr tR2)" "(getAllElements zipCr)" "(insert zipCr tR2)" "(zipperCreate \#test.quadTree.QuadNode{\:o [], \:d 0, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [0.0,0.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [100.0,100.0]>}}, \:c (\#test.quadTree.QuadNode{\:o [\#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [6.0,6.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [20.0,1.0]>}}], \:d 1, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [0.0,0.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [50.0,50.0]>}}, \:c []} \#test.quadTree.QuadNode{\:o [], \:d 1, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [50.0,0.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords [100.0 50.0]}}, \:c []} \#test.quadTree.QuadNode{\:o [], \:d 1, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [0.0,50.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords [50.0 100.0]}\\r\\n}, \:c []} \#test.quadTree.QuadNode{\:o [], \:d 1, \:mD 1, \:b \#test.dataTypesMatrix.Rectangle{\:pos \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [50.0,50.0]>}, \:size \#test.dataTypesMatrix.XYPoint{\:coords \#<Vector2 [100.0,100.0]>}}, \:c []})})" "\\n(insert zipCr tR2)" "(insert zipCr tR2)" "zipCr" "(getAllElements zipCr)" "(insert zipCr tR2)" "(getAllElements zipCr)" " (getAllElements zipCr)" "(conj [2] [3])" "(getAllElements zipCr)" "(concat [3] [2])" "(concat [3] [2 1])" " (con [3] [2 1])" "(conj [3] [2 1])" "(reduce \#(conj %1 %2) [1 2 3])" "(reduce \#(conj %2 %1) [1 2 3])" "(reduce \#(conj %1 %2) [] [1 2 3])" "(getAllElements zipCr)" " (getAllElements (insert zipCr tR2))" "(getAllElements (insert zipCr tR2))" "(time  (getAllElements (insert zipCr tR2)))" " (time  (getAllElements zipCr ))" "(time  (getAllElements zipCr ))" "(time (zipperCreate bQuad))" "testUni" "(placeSystems testUni 3)" "(test.util/getUniqueRndKey (\:starMap uni) nr)" "(test.util/getUniqueRndKey (\:starMap testUni) nr)" "(test.util/getUniqueRndKey (\:starMap testUni) 3)" "(test.util/getUniqueRndKey (\:starMap testUni) 3\\n                           )" "(placeSystems testUni 3)" "testUni" "(\:starMap testUni )" "(first (\:starMap testUni))" "(type (first (\:starMap testUni)))" "(second \\n  (\:starMap testUni))" "(createMap [20 20])" "(getModPos [2 1 3])" " (getModPos 2 1 3)" "(getModPos 2 2 3)" "(rem 12 3)" "(rem 4 7)" "(rem 11 7)" "(rem 7 3)" "(mod 7 1)" "(mod 7 3)" "(rem 7 3)" "(mod 6 3)" "(rem 6 3)" "(mod 7 3)" "(mod 6 3)" "(rem 6 3)" "(/ 6 3)" "(getCoordPos 4 3)" "(mod 4 3)" "(mod 7\\n     3)" "(- 7 (* 3(mod 7 3)))" "(- 7 (* 3(rem 7 3)))" "(mod 7 3)" "(/ 7 3)" "(rem 7 3)" "(java.lang.Math/floorDiv 7 3)" " (java.lang.Math/floorDiv 5 3)" "(getCoordPos 8 3)" "(getCoordPos 3 3)" "(getCoordPos 7\\n             3)" "(getCoordPos 2 3)" "(getCoordPos 6\\n             3)" "(createMap [20 20])"]
eclipse.preferences.version=1
