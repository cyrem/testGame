cmdhistory=[";; Switching to test.core namespace" "(println sysMap)" "(createMap 200 200)" "(createSystem \\"test\\")" "(createPlanet \\"test\\")" ";; Switching to test.core namespace" "(createSystem \\"sdf\\")" "(createMap 200 200)" ";; Switching to test.core namespace" "(getRandPos 200 200 @sysMap)" "(createMap 200 200)" "(type (placeSystems @sysMap 5))" "(type @sysMap)" "(createMap 200 200)" ";; Switching to test.core namespace" "(createMap 200 200)" "(placeSystems @sysMap 5)" "(println @sysMap)" "(createMap 200 200)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test.core)))" "(createMap 200 200)" "(reset\! sysMap nil)" "(createMap 200 200)" "(reset\! sysMap nil\\n        )" "(createMap 200 200)" "(reset\! sysMap nil)" "(createMap 200 200)" "(println (count sysMap))" "(println (count @sysMap))" "(createMap sysMap)" "(println @sysMap)" "(\:x @sysMap)" "(placeSystems @sysMap 5)" "(assoc (\:x @sysMap) 22)" "(assoc  @sysMap \:x 22)" "(placeSystems @sysMap 5)" ";; Switching to test.core namespace" "(createMap 200 200)" ";; Switching to test.core namespace" "(createMap 200 200)" "(take 5 \#(rand-nth {1 2 3 4 5 6 7 8 9}))" "(map \#(* % 2) (range 1 20))" "(take 20 (lazy-seq (placeSystems sysMap 5)))" "(take 20 (lazy-seq (placeSystems @sysMap 5)))" "(time (take 20 (lazy-seq (placeSystems sysMap 5))))" "(take 20 (lazy-seq (placeSystems @sysMap 5)))" "(time (take 20 (lazy-seq (placeSystems @sysMap 5))))" "(getUniqueRndKey 5 [1 2 3 4 5])" "(test.util/getUniqueRndKey 5 [1 2 3 4 5])" "(test.util/getUniqueRndKey 5 {1 2 3 4 5})" "(test.util/getUniqueRndKey 2 {1 2 3 4 5})" "(test.util/getUniqueRndKey 2 {1 2 3 4 5 6})" "(test.util/getUniqueRndKey 2 \#{1 2 3 4 5 6})" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(test.util/getUniqueRndKey 2 (hash-map \\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"))" "(rand-nth (hash-map \\"1\\" \\"2\\"))" "(test.util/getUniqueRndKey 2 [\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"])" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(keys {\\"1\\" \\"2\\"})" "(rand-nth  (keys {\\"1\\" \\"2\\"}))" "(dissoc (keys {\\"1\\" \\"2\\" \\"3\\" \\"4\\"}) \\"2\\")" "(test.util/getUniqueRndKey 2 [\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"])" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(assoc [3 3 3 3] 5)" "(assoc [3 3 3 3] 5 33)" "(test.util/getUniqueRndKey 2 {\\"1\\" \\"2\\" \\"3\\" \\"4\\" \\"5\\" \\"6\\"})" "(test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"})" "(rand-nth (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(assoc (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"jhdfdjshj\\" \\"dfksahjasdgfdg\\")" "(lazy-seq (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"jhdfdjshj\\" \\"dfksahjasdgfdg\\")" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(type (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) )" "(test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"})" "(rand-nth (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}))" "(dissoc (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(dissoc apply (test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(dissoc (apply test.util/getUniqueRndKey 2 {\\"test\\" \\"sdfas\\" \\"sdf\\" \\"asdfhhj\\" \\"jzg\\" \\"jzjgdgzj\\"}) \\"test\\")" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(dissoc (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")) \\"asdf\\")" "(type (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")))" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(rand-nth (keys (hash-map \\"1\\" \\"2\\")))" "(type (keys (hash-map \\"1\\" \\"2\\")))" "(assoc (keys (hash-map \\"1\\" \\"2\\")\\"3\\" \\"4\\")\\n       )" "(assoc (keys (hash-map \\"1\\" \\"2\\"))\\"3\\" \\"4\\")" "(conj (keys (hash-map \\"1\\" \\"2\\"))\\"3\\" \\"4\\")" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(test.util/getUniqueRndKey 1 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\"))" "(time (test.util/getUniqueRndKey 2 (hash-map \\"asdf\\" \\"sdf\\" \\"asdgdfdf\\" \\"dsf\\")))" ";; Switching to test.map namespace" ";; Switching to test.util namespace" "(getUniqueRndKey 5 (hash-map \\"1\\" \\"2\\" \\"3\\" \\"4\\"))" "(getUniqueRndKey 1 (hash-map \\"1\\" \\"2\\" \\"3\\" \\"4\\"))" "(type (getUniqueRndKey 1 tmap))" "(rand-nth (getUniqueRndKey 1 tmap))" "(getUniqueRndKey 1 tmap)" "(assoc [] \\"dsf\\")" "(getUniqueRndKey 1 tmap)" "(getUniqueRndKey 2 tmap)" "(getUniqueRndKey 3 tmap)" ";; Switching to test.map namespace" "(createMap 200 200 50)" "(placeSystems 5)" "(createSystem \\"test\\")" "(take (util/rand-int1 4) (createPlanet))" "(createPlanet)" "(take (util/rand-int1 4) (createPlanet))" "(createSystem \\"asdf\\")" "(createPlanet)" "(createSystem \\"asdf\\")" "(hash-map 1 \\"2\\")" "(test.map/createSystem \\"asdf\\")" "(test.map/placeSystems 4)" "(for [x 10]\\n  (println x))" "(for [x [1 2 3 4 5 6]]\\r\\n     (println x))" "(range 5)" "(map \#(println %) (range 3))" "(test.map/createSystem \\"asdf\\")" " (test.map/createSystem \\"asdf\\")" "(repeat 4 (test.map/createPlanet))" "(take 4 (test.map/createPlanet))" "(dotimes [_ 5]\\n  (test.map/createPlanet))" "(dotimes [x 5]\\r\\n     (test.map/createPlanet))" "(into [] (dotimes [x 5]\\r\\n        (test.map/createPlanet)))" "(for [_ (range 5)]\\n  (test.map/createPlanet)\\n  )\#" "(for [_ (range 5)]\\r\\n     (test.map/createPlanet)\\r\\n     )" "(into [] (for [_ (range 5)]\\r\\n     (test.map/createPlanet)\\r\\n     ))" "(test.map/createSystem \\"sdf\\")" "(hash-map \\"2\\" (agent nil))" "(test.map/createSystem \\"sdf\\")" "(+ 2 2)" ";; Switching to test.map namespace" "(placeSystem 5)" "(placeSystems 3)" "(take 2 (placeSystems 3))" "(take 1 (placeSystems 3))" "(take 2 (apply placeSystems 3))" "(take 2 (apply placeSystems '3))" "(take 2 (lazy-seq (placeSystems 3) ))" "(testM planet \\"sd\\" 5 \\"sdff\\")" "(testM \\"planet\\" \\"sd\\" 5 \\"sdff\\")" "(testM \\"dfsfa\\" 33 332 22)" "(testM [\\"dfsfa\\"] 33 332 22)" " (testM [\\"dfsfa\\"] 33 332 22)" " (testM [\\"dfsfa\\"] 33)" "(testM [\\"blah\\"] 22)" ";; Switching to test.map namespace" "(testM [\\"blah\\"] 22)" "(testM [planet] 22 11 33)" " (testM [planet] '(22 11 33))" "(hash-map '[2 2] \\"sdf\\")" "(\: [2 2] (hash-map '[2 2] \\"sdf\\"))" "(\:'[2 2] (hash-map '[2 2] \\"sdf\\"))" "(get (hash-map '[2 2] \\"sdf\\") [2 2])" "('[2 2] (hash-map '[2 2] \\"sdf\\"))" "(\#'[2 2] (hash-map '[2 2] \\"sdf\\"))" "(createMap [20 20])" "(createMap [5 5])" "(dotimes [2 2])" "(dotimes \\n  '[2 2])" "(dotimes [2 2])" "(createMap [3 3])" ";; Switching to test.map namespace" "(createMap [20 20])" "(get (createMap [20 20]) [5 5])" "(test.util/getUniqueRndKey 10 (createMap [20 20]))" "(placeSystems 20 testUni)" "testUni" "(get testUni [15 6])" "(get testUni [9 6])" "(get (\:starMap testUni)  [15 6])" "(get (\:starMap testUni)  [9 6])" "(get (\:starMap testUni)  [5 2])" "(get (\:starMap testUni)  [15 6])" "testUni" "(\:starMap testUni)" "(println (get (\:starMap testUni) [17 15] ) )" "(\:starMap testUni)" "(get  (\:starMap testUni) [10 7])" ";; Switching to test.core namespace" "(run \:dispose)" "(run \:dispose\\n     )" "(run \:dispose)" ";; Switching to test.core namespace" "(-> gameWindow pack\! show\!)" ";; Switching to test.core namespace" "(-> gameWindow pack\! show\!)" "(draw img)" "(-> gameWindow pack\! show\!)" " (-> gameWindow pack\! show\!)" ";; Switching to test.core namespace" " (-> gameWindow pack\! show\!)" "(-> gameWindow pack\! show\!)" "(-> gameWindow show\!)" ";; Switching to test.core namespace" "(+ 2 2)" "(show\! gameWindow)" "(Canvas.\\n  )" "(Canvas.)" "(show\! gameWindow)" "(+ 2 2)" "pan" "(show\! gameWindow)" "(config pan)" "(config pan \:paint)" "(config pan \:id)" "(config\! pan \:paint \#(draw (.drawImage img)))" "(show\! gameWindow)" "img" "(show\! gameWindow)" " (show\! gameWindow)" "img" "(show\! gameWindow)" "img" "(.drawImage)" "(.drawImage img 10 10 nil)" "(show\! gameWindow)" "(paintLoop \\"dsf\\" \\"sdakl\\")" "(time (paintLoop \\"dsf\\" \\"sdakl\\"))" "gameWindow" "(\:content gameWindow)" "objL" "(time (println objL))" "but" "@objL" "(type @objL)" "(show\! gameWindow)" "objL" "@objL" "(doseq [i @objL]\\n  (println (\:img i)))" "(doseq [i @objL]\\r\\n     (println i))" "(doseq [i @objL]\\r\\n     (println (\:img @i)))" "(show\! gameWindow)" "(nth [1 2 3 4 5] 5)" "(nth [1 2 3 4 5] 3)" "(nth [1 2 3 4 5] 0)" "@objL" "(count @objL)" "objL" "@objL" "(show\! gameWindow)" "(nth @objL 2)" "(nth @objL 1)" "(paintLoop gameWindow)" "(show\! gameWindow)" "(dosync (alter (nth @objL 0) moveObj [1 1]))" "(send (nth @objL 0) moveObj [1 1])" "(nth @objL 0)" "(paintLoop gameWindow)" "(mVec [800 600] [10 10])" ";; Switching to test.core namespace" "(mVec [800 600] [10 10])" "(mVec [800 600] [0 10])" "(paintLoop gameWindow)" ";; Switching to test.core namespace" "(paintLoop gameWindow)" "(> 30 30000)" "(paintLoop gameWindow)" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "(reset\! but (gObj. \\"sdfasf\\" img [0 0]))" "(send but (gObj. \\"sdfasf\\" img [0 0]))" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" "objL" ";; Switching to test.core namespace" "objL" ";; Switching to test.core namespace" "objL" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "(paintLoop)" ";; Switching to test.core namespace" "fsad" "(paintLoop)"]
eclipse.preferences.version=1
